nameOverride: ""
fullnameOverride: ""
global:
  namespaceOverride: ""
awsRegion: "us-east-1"
clusterName: ""

# -- Additional labels to add into metadata
additionalLabels: {}
  # app: adot

serviceAccount:
  create: False
  annotations: {}
  name: ""

adotCollector:
  image:
    name: "aws-otel-collector"
    repository: "onyx-container/aws-observability/aws-otel-collector"
    tag: "v0.31.0"
    daemonSetPullPolicy: "IfNotPresent"
    sidecarPullPolicy: "Always"
  service:
    name: otel-collector-service
    namespace: adot
    port: 4317
    targetPort: 4317 
  configMap:
    name: "adot-conf"
    app: "opentelemetry"
    component: "adot-conf"
    data_prepper_svc: "Data-prepper-svc-url-endpoint"
    extensions:
      healthCheck: ""
      sigv4auth:
        region: ""
    tls_setting_insecure: true
    log_level: "debug"
    otlpreceivers:
      grpcendpoint: 0.0.0.0:4317
      httpendpoint: 0.0.0.0:4318
    processors:
      timeout: 1s
      batch_size: 50
    service:
      traces: 
        receivers: ["otlp"]
        exporters: ["otlp/2"]
      extensions: ["health_check", "sigv4auth"]
  clusterRoleName: "adot-collector-role"
  clusterRoleBindingName: "adot-collector-role-binding"
  daemonSet:
    enabled: true
    daemonSetName: "adot-collector-daemonset"
    createNamespace: false
    namespace: "adot"
    namespaceOverride: ""
    serviceAccount:
      create: true
      name: "adot-collector"
      annotations: {}
    containersName: "adot-collector-container"
    env:
      - name: "K8S_NODE_NAME"
        valueFrom:
          fieldRef:
            fieldPath: "spec.nodeName"
      - name: "HOST_IP"
        valueFrom:
          fieldRef:
            fieldPath: "status.hostIP"
      - name: "K8S_POD_NAME"
        valueFrom:
          fieldRef:
            fieldPath: "metadata.name"
      - name: "HOST_NAME"
        valueFrom:
          fieldRef:
            fieldPath: "spec.nodeName"
      - name: "K8S_NAMESPACE"
        valueFrom:
          fieldRef:
            fieldPath: "metadata.namespace"
    command:
      - "/awscollector"
      - "--config=/conf/adot-config.yaml"
    privateregistrysecret: regcred
    resources:
      limits:
        cpu: "200m"
        memory: "200Mi"
      requests:
        cpu: "200m"
        memory: "200Mi"
    volumes:
      - configMap:
          name: "adot-conf"
          items:
            - key: "adot-config"
              path: "adot-config.yaml"
        name: "adot-config-vol"
      - name: "rootfs"
        hostPath:
          path: "/"
      - name: "dockersock"
        hostPath:
          path: "/var/run/docker.sock"
      - name: "varlibdocker"
        hostPath:
          path: "/var/lib/docker"
      - name: "containerdsock"
        hostPath:
          path: "/run/containerd/containerd.sock"
      - name: "sys"
        hostPath:
          path: "/sys"
      - name: "devdisk"
        hostPath:
          path: "/dev/disk/"
    volumeMounts:
      - name: "rootfs"
        mountPath: "/rootfs"
        readOnly: true
      - name: "dockersock"
        mountPath: "/var/run/docker.sock"
        readOnly: true
      - name: "varlibdocker"
        mountPath: "/var/lib/docker"
        readOnly: true
      - name: "containerdsock"
        mountPath: "/run/containerd/containerd.sock"
        readOnly: true
      - name: "sys"
        mountPath: "/sys"
        readOnly: true
      - name: "devdisk"
        mountPath: "/dev/disk"
        readOnly: true
      - name: "adot-config-vol"
        mountPath: "/conf"
  sidecar:
    enabled: false
    name: "adot-sidecar"
    namespace: "adot-sidecar-namespace"
    namespaceOverride: ""
    regionS3: ""
    replicas: 1
    image:
      name: ""
      repository: ""
      tag: ""
      pullPolicy: ""
    resources:
      limits:
        cpu: "256m"
        memory: "512Mi"
      requests:
        cpu: "32m"
        memory: "24Mi"
